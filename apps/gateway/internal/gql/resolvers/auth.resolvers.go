package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"github.com/yahn1ukov/scribble/apps/gateway/internal/gql/gqlmodels"
	"github.com/yahn1ukov/scribble/libs/grpc"
	authpb "github.com/yahn1ukov/scribble/proto/auth"
)

func (r *mutationResolver) Login(ctx context.Context, input gqlmodels.LoginInput) (*gqlmodels.AuthOutput, error) {
	res, err := r.authClient.Login(
		ctx,
		&authpb.LoginRequest{
			Email:    input.Email,
			Password: input.Password,
		},
	)
	if err != nil {
		return nil, grpc.ParseError(err).Error()
	}

	output := &gqlmodels.AuthOutput{
		Token: res.Token,
	}

	return output, nil
}

func (r *mutationResolver) Register(ctx context.Context, input gqlmodels.RegisterInput) (*gqlmodels.AuthOutput, error) {
	res, err := r.authClient.Register(
		ctx,
		&authpb.RegisterRequest{
			Email:     input.Email,
			FirstName: input.FirstName,
			LastName:  input.LastName,
			Password:  input.Password,
		},
	)
	if err != nil {
		return nil, grpc.ParseError(err).Error()
	}

	output := &gqlmodels.AuthOutput{
		Token: res.Token,
	}

	return output, nil
}
