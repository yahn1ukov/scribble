package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
	"github.com/yahn1ukov/scribble/libs/grpc"
	filepb "github.com/yahn1ukov/scribble/proto/file"
	"io"
)

func (r *mutationResolver) UploadFile(ctx context.Context, noteID uuid.UUID, file graphql.Upload) (bool, error) {
	content, err := io.ReadAll(file.File)
	if err != nil {
		return false, err
	}

	if _, err = r.fileClient.UploadFile(
		ctx,
		&filepb.UploadFileRequest{
			NoteId:      noteID.String(),
			Name:        file.Filename,
			Size:        file.Size,
			ContentType: file.ContentType,
			Content:     content,
		},
	); err != nil {
		return false, grpc.ParseError(err).Error()
	}

	return true, nil
}

func (r *mutationResolver) RemoveFile(ctx context.Context, id uuid.UUID, noteID uuid.UUID) (bool, error) {
	if _, err := r.fileClient.RemoveFile(
		ctx,
		&filepb.RemoveFileRequest{
			Id:     id.String(),
			NoteId: noteID.String(),
		},
	); err != nil {
		return false, grpc.ParseError(err).Error()
	}

	return true, nil
}
