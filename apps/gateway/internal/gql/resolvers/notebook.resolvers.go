package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/google/uuid"
	"github.com/yahn1ukov/scribble/apps/gateway/internal/gql/gqlmodels"
	"github.com/yahn1ukov/scribble/apps/gateway/internal/grpc/models"
)

// CreateNotebook is the resolver for the createNotebook field.
func (r *mutationResolver) CreateNotebook(ctx context.Context, input gqlmodels.CreateNotebookInput) (bool, error) {
	req := &models.CreateNotebookRequest{
		Title: input.Title,
	}

	if err := r.grpc.CreateNotebook(ctx, req); err != nil {
		return false, err
	}

	return true, nil
}

// UpdateNotebook is the resolver for the updateNotebook field.
func (r *mutationResolver) UpdateNotebook(ctx context.Context, id uuid.UUID, input gqlmodels.UpdateNotebookInput) (bool, error) {
	req := &models.UpdateNotebookRequest{
		Title: input.Title,
	}

	if err := r.grpc.UpdateNotebook(ctx, id, req); err != nil {
		return false, err
	}

	return true, nil
}

// DeleteNotebook is the resolver for the deleteNotebook field.
func (r *mutationResolver) DeleteNotebook(ctx context.Context, id uuid.UUID) (bool, error) {
	if err := r.grpc.DeleteNotebook(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// Notebooks is the resolver for the notebooks field.
func (r *queryResolver) Notebooks(ctx context.Context) ([]*gqlmodels.Notebook, error) {
	notebooks, err := r.grpc.GetAllNotebooks(ctx)
	if err != nil {
		return nil, err
	}

	var output []*gqlmodels.Notebook
	for _, notebook := range notebooks {
		output = append(
			output,
			&gqlmodels.Notebook{
				ID:        uuid.MustParse(notebook.Id),
				Title:     notebook.Title,
				CreatedAt: notebook.CreatedAt.AsTime(),
			},
		)
	}

	return output, nil
}
