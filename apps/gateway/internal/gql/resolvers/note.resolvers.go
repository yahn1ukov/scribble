package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/google/uuid"
	"github.com/yahn1ukov/scribble/apps/gateway/internal/gql/gqlmodels"
	"github.com/yahn1ukov/scribble/apps/gateway/internal/grpc/models"
)

// CreateNote is the resolver for the createNote field.
func (r *mutationResolver) CreateNote(ctx context.Context, notebookID uuid.UUID, input gqlmodels.CreateNoteInput) (bool, error) {
	reqNote := &models.CreateNoteRequest{
		Title: input.Title,
		Body:  input.Body,
	}

	id, err := r.grpc.CreateNote(ctx, notebookID, reqNote)
	if err != nil {
		return false, err
	}

	var reqFiles []*models.UploadFileRequest
	for _, file := range input.Files {
		reqFiles = append(
			reqFiles,
			&models.UploadFileRequest{
				Name:        file.Filename,
				Size:        file.Size,
				ContentType: file.ContentType,
				Content:     file.File,
			},
		)
	}

	if err = r.grpc.UploadAllFiles(ctx, id, reqFiles); err != nil {
		return false, err
	}

	return true, nil
}

// UpdateNote is the resolver for the updateNote field.
func (r *mutationResolver) UpdateNote(ctx context.Context, id uuid.UUID, notebookID uuid.UUID, input gqlmodels.UpdateNoteInput) (bool, error) {
	req := &models.UpdateNoteRequest{
		Title: input.Title,
		Body:  input.Body,
	}

	if err := r.grpc.UpdateNote(ctx, id, notebookID, req); err != nil {
		return false, err
	}

	return true, nil
}

// DeleteNote is the resolver for the deleteNote field.
func (r *mutationResolver) DeleteNote(ctx context.Context, id uuid.UUID, notebookID uuid.UUID) (bool, error) {
	if err := r.grpc.DeleteNote(ctx, id, notebookID); err != nil {
		return false, err
	}

	return true, nil
}

// Note is the resolver for the note field.
func (r *queryResolver) Note(ctx context.Context, id uuid.UUID, notebookID uuid.UUID) (*gqlmodels.Note, error) {
	note, err := r.grpc.GetNote(ctx, id, notebookID)
	if err != nil {
		return nil, err
	}

	files, err := r.grpc.GetAllFiles(ctx, id)
	if err != nil {
		return nil, err
	}

	var gqlfiles []*gqlmodels.File
	for _, file := range files {
		gqlfiles = append(
			gqlfiles,
			&gqlmodels.File{
				ID:          uuid.MustParse(file.Id),
				Name:        file.Name,
				Size:        file.Size,
				ContentType: file.ContentType,
				CreatedAt:   file.CreatedAt.AsTime(),
			},
		)
	}

	output := &gqlmodels.Note{
		ID:        uuid.MustParse(note.Id),
		Title:     note.Title,
		Body:      note.Body,
		CreatedAt: note.CreatedAt.AsTime(),
		Files:     gqlfiles,
	}

	return output, nil
}

// Notes is the resolver for the notes field.
func (r *queryResolver) Notes(ctx context.Context, notebookID uuid.UUID) ([]*gqlmodels.Note, error) {
	notes, err := r.grpc.GetAllNotes(ctx, notebookID)
	if err != nil {
		return nil, err
	}

	var output []*gqlmodels.Note
	for _, note := range notes {
		output = append(
			output,
			&gqlmodels.Note{
				ID:        uuid.MustParse(note.Id),
				Title:     note.Title,
				Body:      note.Body,
				CreatedAt: note.CreatedAt.AsTime(),
			},
		)
	}

	return output, nil
}
