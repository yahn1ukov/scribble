package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/google/uuid"
	"github.com/yahn1ukov/scribble/apps/gateway/internal/gql/gqlmodels"
	"github.com/yahn1ukov/scribble/apps/gateway/internal/grpc/models"
)

// CreateNote is the resolver for the createNote field.
func (r *mutationResolver) CreateNote(ctx context.Context, notebookID uuid.UUID, input gqlmodels.CreateNoteInput) (bool, error) {
	_, err := r.grpc.CreateNote(ctx, notebookID,
		&models.CreateNoteInput{
			Title: input.Title,
			Body:  input.Body,
		},
	)
	if err != nil {
		return false, err
	}

	return true, nil
}

// UpdateNote is the resolver for the updateNote field.
func (r *mutationResolver) UpdateNote(ctx context.Context, id uuid.UUID, notebookID uuid.UUID, input gqlmodels.UpdateNoteInput) (bool, error) {
	if err := r.grpc.UpdateNote(ctx, id, notebookID,
		&models.UpdateNoteInput{
			Title: input.Title,
			Body:  input.Body,
		},
	); err != nil {
		return false, err
	}

	return true, nil
}

// DeleteNote is the resolver for the deleteNote field.
func (r *mutationResolver) DeleteNote(ctx context.Context, id uuid.UUID, notebookID uuid.UUID) (bool, error) {
	if err := r.grpc.DeleteNote(ctx, id, notebookID); err != nil {
		return false, err
	}

	return true, nil
}

// Note is the resolver for the note field.
func (r *queryResolver) Note(ctx context.Context, id uuid.UUID, notebookID uuid.UUID) (*gqlmodels.Note, error) {
	note, err := r.grpc.GetNote(ctx, id, notebookID)
	if err != nil {
		return nil, err
	}

	return &gqlmodels.Note{
		ID:        uuid.MustParse(note.Id),
		Title:     note.Title,
		Body:      note.Body,
		CreatedAt: note.CreatedAt.AsTime(),
	}, nil
}

// Notes is the resolver for the notes field.
func (r *queryResolver) Notes(ctx context.Context, notebookID uuid.UUID) ([]*gqlmodels.Note, error) {
	notes, err := r.grpc.GetAllNotes(ctx, notebookID)
	if err != nil {
		return nil, err
	}

	var output []*gqlmodels.Note
	for _, note := range notes {
		output = append(output,
			&gqlmodels.Note{
				ID:        uuid.MustParse(note.Id),
				Title:     note.Title,
				Body:      note.Body,
				CreatedAt: note.CreatedAt.AsTime(),
			},
		)
	}

	return output, nil
}
